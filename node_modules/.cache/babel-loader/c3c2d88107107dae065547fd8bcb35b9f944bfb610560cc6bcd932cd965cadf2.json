{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nvar fs = require('graceful-fs');\nvar chain = require('slide').chain;\nvar MurmurHash3 = require('imurmurhash');\nvar extend = Object.assign || require('util')._extend;\nvar invocations = 0;\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(++invocations)).result();\n}\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n  fs.realpath(filename, function (_, realname) {\n    _writeFile(realname || filename, data, options, callback);\n  });\n}\nfunction _writeFile(filename, data, options, callback) {\n  var tmpfile = getTmpname(filename);\n  if (options.mode && options.chown) {\n    return thenWriteFile();\n  } else {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    return fs.stat(filename, function (err, stats) {\n      if (err || !stats) return thenWriteFile();\n      options = extend({}, options);\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n      return thenWriteFile();\n    });\n  }\n  function thenWriteFile() {\n    chain([[writeFileAsync, tmpfile, data, options.mode, options.encoding || 'utf8'], options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid], options.mode && [fs, fs.chmod, tmpfile, options.mode], [fs, fs.rename, tmpfile, filename]], function (err) {\n      err ? fs.unlink(tmpfile, function () {\n        callback(err);\n      }) : callback();\n    });\n  }\n\n  // doing this instead of `fs.writeFile` in order to get the ability to\n  // call `fsync`.\n  function writeFileAsync(file, data, mode, encoding, cb) {\n    fs.open(file, 'w', options.mode, function (err, fd) {\n      if (err) return cb(err);\n      if (Buffer.isBuffer(data)) {\n        return fs.write(fd, data, 0, data.length, 0, syncAndClose);\n      } else if (data != null) {\n        return fs.write(fd, String(data), 0, String(encoding), syncAndClose);\n      } else {\n        return syncAndClose();\n      }\n      function syncAndClose(err) {\n        if (err) return cb(err);\n        fs.fsync(fd, function (err) {\n          if (err) return cb(err);\n          fs.close(fd, cb);\n        });\n      }\n    });\n  }\n}\nfunction writeFileSync(filename, data, options) {\n  if (!options) options = {};\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename);\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename);\n        options = extend({}, options);\n        if (!options.mode) {\n          options.mode = stats.mode;\n        }\n        if (!options.chown && process.getuid) {\n          options.chown = {\n            uid: stats.uid,\n            gid: stats.gid\n          };\n        }\n      } catch (ex) {\n        // ignore stat errors\n      }\n    }\n    var fd = fs.openSync(tmpfile, 'w', options.mode);\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n    fs.fsyncSync(fd);\n    fs.closeSync(fd);\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n    if (options.mode) fs.chmodSync(tmpfile, options.mode);\n    fs.renameSync(tmpfile, filename);\n  } catch (err) {\n    try {\n      fs.unlinkSync(tmpfile);\n    } catch (e) {}\n    throw err;\n  }\n}","map":{"version":3,"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","fs","require","chain","MurmurHash3","extend","Object","assign","_extend","invocations","filename","__filename","hash","String","process","pid","result","data","options","callback","Function","realpath","_","realname","_writeFile","tmpfile","mode","chown","thenWriteFile","stat","err","stats","getuid","uid","gid","writeFileAsync","encoding","chmod","rename","unlink","file","cb","open","fd","Buffer","isBuffer","write","length","syncAndClose","fsync","close","realpathSync","ex","statSync","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync","unlinkSync","e"],"sources":["/Users/jordane/Desktop/WalletScan/scan/node_modules/configstore/node_modules/write-file-atomic/index.js"],"sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\n\nvar fs = require('graceful-fs')\nvar chain = require('slide').chain\nvar MurmurHash3 = require('imurmurhash')\nvar extend = Object.assign || require('util')._extend\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = null\n  }\n  if (!options) options = {}\n  fs.realpath(filename, function (_, realname) {\n    _writeFile(realname || filename, data, options, callback)\n  })\n}\nfunction _writeFile (filename, data, options, callback) {\n  var tmpfile = getTmpname(filename)\n\n  if (options.mode && options.chown) {\n    return thenWriteFile()\n  } else {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    return fs.stat(filename, function (err, stats) {\n      if (err || !stats) return thenWriteFile()\n\n      options = extend({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n      return thenWriteFile()\n    })\n  }\n\n  function thenWriteFile () {\n    chain([\n      [writeFileAsync, tmpfile, data, options.mode, options.encoding || 'utf8'],\n      options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid],\n      options.mode && [fs, fs.chmod, tmpfile, options.mode],\n      [fs, fs.rename, tmpfile, filename]\n    ], function (err) {\n      err ? fs.unlink(tmpfile, function () { callback(err) })\n        : callback()\n    })\n  }\n\n  // doing this instead of `fs.writeFile` in order to get the ability to\n  // call `fsync`.\n  function writeFileAsync (file, data, mode, encoding, cb) {\n    fs.open(file, 'w', options.mode, function (err, fd) {\n      if (err) return cb(err)\n      if (Buffer.isBuffer(data)) {\n        return fs.write(fd, data, 0, data.length, 0, syncAndClose)\n      } else if (data != null) {\n        return fs.write(fd, String(data), 0, String(encoding), syncAndClose)\n      } else {\n        return syncAndClose()\n      }\n      function syncAndClose (err) {\n        if (err) return cb(err)\n        fs.fsync(fd, function (err) {\n          if (err) return cb(err)\n          fs.close(fd, cb)\n        })\n      }\n    })\n  }\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename)\n\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename)\n        options = extend({}, options)\n        if (!options.mode) {\n          options.mode = stats.mode\n        }\n        if (!options.chown && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      } catch (ex) {\n        // ignore stat errors\n      }\n    }\n\n    var fd = fs.openSync(tmpfile, 'w', options.mode)\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    fs.fsyncSync(fd)\n    fs.closeSync(fd)\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    if (options.mode) fs.chmodSync(tmpfile, options.mode)\n    fs.renameSync(tmpfile, filename)\n  } catch (err) {\n    try { fs.unlinkSync(tmpfile) } catch (e) {}\n    throw err\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}